Description: >
    This template deploys an Application Load Balancer with an associated
    Listener and Security Group rules, and deploys an AutoScaling Group of
    t3.medium EC2 instances with a minimum of 4 instances and a maximum
    of 8 instances with associated Security Group rules and an associated 
    Launch Configuration that downloads the Web Application code from an
    S3 Bucket.
Parameters:

    EnvironmentName:
        Description: The environment name that will be prefixed to resource names
        Type: String


Resources:

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to the Load Balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to the web servers and SSH access from local VPC only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  S3ReadOnlyEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - S3ReadOnlyEC2InstanceProfile

  WebServerAutoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          cd /var/www/html
          aws s3 cp s3://cdnd-udacity-project2-tamer/udagram_udacity.zip .
          unzip -o udagram_udacity.zip
          systemctl start apache2.service
      ImageId: ami-0ac80df6eff0e70b5  # This ubuntu AMI value will be needed to be changed in the future 
      IamInstanceProfile: !Ref S3ReadOnlyEC2InstanceProfile  # This EC2 IAM role had to be created first 
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIVATE-NETS"
      LaunchConfigurationName:
        Ref: WebServerAutoScalingLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebServerTargetGroup

  WebServerApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC2-SN"
      SecurityGroups:
      - Ref: LoadBalancerSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebServerTargetGroup
      LoadBalancerArn:
        Ref: WebServerApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

  ApplicationLoadBalancerListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebServerTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1


Outputs:

  WebServerApplicationLoadBalancerURL:
    Description: The Load Balancer URL
    Value: !Join ["", ["http://", !GetAtt WebServerApplicationLoadBalancer.DNSName,]]
    Export:
      Name: !Sub ${EnvironmentName}-DNS-NAME